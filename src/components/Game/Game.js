import React from "react";
import { useState, useEffect } from "react";
import "./game.css";
import KeyboardPress from "../Keyboard/KeyboardPress";

const fiveLetterWords = [
  "acorn",
  "acrid",
  "actor",
  "adept",
  "adobe",
  "adorn",
  "adult",
  "agent",
  "agony",
  "aisle",
  "alder",
  "alien",
  "alike",
  "alive",
  "alone",
  "aloud",
  "amber",
  "ample",
  "amuck",
  "angel",
  "angry",
  "ankle",
  "antic",
  "arise",
  "aspen",
  "aspic",
  "audio",
  "awful",
  "azure",
  "balmy",
  "bandy",
  "basic",
  "basin",
  "batch",
  "baton",
  "bawdy",
  "beady",
  "beamy",
  "beast",
  "being",
  "bight",
  "bigot",
  "binge",
  "bingo",
  "biped",
  "birch",
  "birth",
  "bison",
  "biter",
  "blame",
  "bland",
  "blank",
  "bleak",
  "bleat",
  "blind",
  "bloat",
  "blond",
  "blunt",
  "bodge",
  "bogie",
  "bogus",
  "boned",
  "bonus",
  "bound",
  "boxer",
  "brack",
  "braid",
  "brand",
  "brash",
  "brave",
  "brawl",
  "brawn",
  "brick",
  "brief",
  "brisk",
  "broad",
  "broke",
  "brute",
  "bugle",
  "built",
  "bulky",
  "burly",
  "bushy",
  "butch",
  "cadet",
  "cadre",
  "calyx",
  "camel",
  "caste",
  "cedar",
  "chaos",
  "chard",
  "cheap",
  "chest",
  "chief",
  "china",
  "chirp",
  "chive",
  "choir",
  "choky",
  "chore",
  "churl",
  "clave",
  "cleft",
  "clerk",
  "clove",
  "clown",
  "clung",
  "comer",
  "conga",
  "congé",
  "coral",
  "corny",
  "corps",
  "corse",
  "court",
  "couth",
  "cover",
  "covey",
  "crake",
  "cramp",
  "craps",
  "crash",
  "crawl",
  "crazy",
  "cream",
  "crime",
  "crimp",
  "croup",
  "crown",
  "crude",
  "cruel",
  "cruet",
  "crump",
  "crypt",
  "curia",
  "curst",
  "curve",
  "daily",
  "datum",
  "delta",
  "demon",
  "depth",
  "diary",
  "dicky",
  "dinar",
  "diner",
  "dinge",
  "disco",
  "diver",
  "dogma",
  "doing",
  "dough",
  "downy",
  "dowry",
  "dozen",
  "draft",
  "drake",
  "drift",
  "drove",
  "drunk",
  "ducat",
  "dumpy",
  "dusky",
  "dusty",
  "dwarf",
  "dying",
  "debut",
  "early",
  "elfin",
  "entry",
  "envoy",
  "epoch",
  "equal",
  "ergot",
  "ethic",
  "exact",
  "exist",
  "extra",
  "faint",
  "fairy",
  "faker",
  "fakir",
  "false",
  "fancy",
  "fated",
  "feint",
  "felon",
  "femur",
  "feral",
  "field",
  "fiend",
  "fiery",
  "filet",
  "final",
  "finch",
  "first",
  "fishy",
  "fitch",
  "fiver",
  "fixed",
  "fixer",
  "flair",
  "flaky",
  "flank",
  "flask",
  "flesh",
  "flint",
  "flirt",
  "flora",
  "fluid",
  "fluke",
  "flush",
  "forte",
  "forum",
  "fount",
  "frail",
  "frank",
  "frisk",
  "frond",
  "fusil",
  "fusty",
  "gamut",
  "gaper",
  "garth",
  "gaunt",
  "gauze",
  "genus",
  "getup",
  "giant",
  "glade",
  "gland",
  "glare",
  "gloat",
  "gnome",
  "grail",
  "grand",
  "grate",
  "grave",
  "gravy",
  "great",
  "grief",
  "grise",
  "groat",
  "group",
  "grove",
  "guild",
  "gumbo",
  "hardy",
  "haver",
  "hawse",
  "hazel",
  "heady",
  "heavy",
  "hoary",
  "honey",
  "horde",
  "hover",
  "human",
  "husky",
  "idler",
  "inert",
  "inlet",
  "irony",
  "ivory",
  "jerky",
  "jihad",
  "joust",
  "juicy",
  "jumbo",
  "knave",
  "labor",
  "laity",
  "laker",
  "large",
  "laser",
  "later",
  "latex",
  "laver",
  "leafy",
  "leaky",
  "lemon",
  "letch",
  "limbo",
  "lined",
  "liner",
  "lithe",
  "liver",
  "loath",
  "locus",
  "lofty",
  "logic",
  "lotus",
  "lover",
  "lower",
  "lucid",
  "lucky",
  "lumen",
  "lurid",
  "lusty",
  "lying",
  "lyric",
  "macro",
  "madly",
  "magus",
  "maize",
  "major",
  "manes",
  "mango",
  "manly",
  "manor",
  "manse",
  "maybe",
  "mealy",
  "meaty",
  "media",
  "medic",
  "midge",
  "miner",
  "minor",
  "mirth",
  "miser",
  "misty",
  "mixed",
  "mixer",
  "mocha",
  "modal",
  "model",
  "moiré",
  "moist",
  "molar",
  "monad",
  "moral",
  "morel",
  "mould",
  "mousy",
  "mover",
  "movie",
  "mufti",
  "murky",
  "mushy",
  "music",
  "musty",
  "nadir",
  "naive",
  "naked",
  "nasty",
  "nates",
  "navel",
  "neigh",
  "nervy",
  "night",
  "noble",
  "noisy",
  "north",
  "noted",
  "nymph",
  "oared",
  "ocean",
  "ocher",
  "odium",
  "often",
  "olive",
  "omega",
  "opera",
  "optic",
  "ounce",
  "outer",
  "ovary",
  "ovine",
  "palsy",
  "panic",
  "pants",
  "party",
  "pasty",
  "paten",
  "peach",
  "pecan",
  "pedal",
  "penal",
  "phony",
  "piano",
  "piety",
  "piker",
  "pilot",
  "pinch",
  "pinky",
  "pious",
  "pithy",
  "plain",
  "plumb",
  "plush",
  "poker",
  "pokey",
  "polar",
  "polka",
  "porch",
  "porgy",
  "poser",
  "prawn",
  "prime",
  "primo",
  "privy",
  "prize",
  "prone",
  "prose",
  "proud",
  "proxy",
  "pubes",
  "pylon",
  "quack",
  "qualm",
  "quart",
  "quick",
  "quiet",
  "quint",
  "quirk",
  "quite",
  "quota",
  "rabid",
  "raphe",
  "rapid",
  "ratio",
  "raven",
  "rayon",
  "ready",
  "regal",
  "reign",
  "reins",
  "relax",
  "relay",
  "relic",
  "rheum",
  "right",
  "rocky",
  "rogue",
  "roman",
  "rouge",
  "rough",
  "royal",
  "runic",
  "rusty",
  "sable",
  "sabre",
  "salon",
  "salty",
  "salvo",
  "sandy",
  "satin",
  "satyr",
  "saucy",
  "scald",
  "scaly",
  "scant",
  "scape",
  "scary",
  "scion",
  "scrim",
  "scrip",
  "setup",
  "shady",
  "shaky",
  "shank",
  "shard",
  "shine",
  "shiny",
  "shire",
  "shlep",
  "shoal",
  "shock",
  "short",
  "showy",
  "sigma",
  "siren",
  "skate",
  "skein",
  "skimp",
  "slate",
  "slave",
  "slick",
  "slimy",
  "sloth",
  "smock",
  "smoky",
  "snail",
  "snake",
  "snaky",
  "snowy",
  "soapy",
  "sober",
  "solar",
  "solid",
  "sough",
  "south",
  "spare",
  "spate",
  "spelt",
  "spent",
  "sperm",
  "spick",
  "spicy",
  "spiny",
  "splat",
  "splay",
  "split",
  "spore",
  "sport",
  "sprat",
  "sprue",
  "spume",
  "spunk",
  "squab",
  "squat",
  "squid",
  "stair",
  "stale",
  "stang",
  "stark",
  "steam",
  "stern",
  "stich",
  "stile",
  "stock",
  "stoic",
  "stole",
  "stoma",
  "stone",
  "straw",
  "stria",
  "stuck",
  "suite",
  "sulky",
  "sumac",
  "super",
  "swain",
  "swale",
  "swank",
  "sward",
  "swart",
  "swing",
  "sworn",
  "sylph",
  "synod",
  "syrup",
  "tache",
  "talon",
  "talus",
  "tango",
  "tawny",
  "teary",
  "tempo",
  "tenor",
  "thick",
  "thief",
  "thing",
  "think",
  "thong",
  "throb",
  "thunk",
  "tiger",
  "tiler",
  "timer",
  "tipsy",
  "tired",
  "topaz",
  "topic",
  "torus",
  "tough",
  "touse",
  "trace",
  "trial",
  "trice",
  "tripe",
  "trope",
  "truck",
  "truly",
  "trunk",
  "tuber",
  "tulip",
  "tumid",
  "tumor",
  "tuner",
  "tunic",
  "twice",
  "twink",
  "ultra",
  "umber",
  "umbra",
  "unfit",
  "unite",
  "upset",
  "urban",
  "valor",
  "velar",
  "velum",
  "venal",
  "video",
  "vinyl",
  "viola",
  "viper",
  "vista",
  "vital",
  "vixen",
  "vizor",
  "vocal",
  "vogue",
  "wader",
  "washy",
  "waste",
  "waver",
  "waxen",
  "weald",
  "weary",
  "weird",
  "welsh",
  "wench",
  "wheat",
  "whelk",
  "whist",
  "white",
  "wight",
  "wince",
  "windy",
  "wiper",
  "wired",
  "wizen",
  "world",
  "wormy",
  "worse",
  "worth",
  "wound",
  "woven",
  "wrath",
  "wrong",
  "yacht",
  "zebra",
];

// const word =
//   fiveLetterWords[Math.floor(Math.random() * fiveLetterWords.length)];

function Game() {
  const [word, setWord] = useState(
    fiveLetterWords[Math.floor(Math.random() * fiveLetterWords.length)]
  );
  const letters = word.split("");

  const [currentRow, setCurrentRow] = useState(0);
  const [currentColumn, setCurrentColumn] = useState(0);

  const [rows, setRows] = useState(
    new Array(word.length).fill(new Array(letters.length).fill(""))
  );

  const copyArray = (arr) => {
    return [...arr.map((rows) => [...rows])];
  };

  const updatedRows = copyArray(rows);

  const keyPressed = (key) => {
    if (key === "ENTER") {
      if (currentColumn === rows[0].length) {
        setCurrentRow(currentRow + 1);
        setCurrentColumn(0);
      }
      return;
    }

    if (key === "CLEAR") {
      const prevColumn = currentColumn - 1;
      if (prevColumn >= 0) {
        updatedRows[currentRow][prevColumn] = "";
        setRows(updatedRows);
        setCurrentColumn(prevColumn);
      }
      return;
    }

    if (currentColumn < rows[0].length) {
      updatedRows[currentRow][currentColumn] = key;
      setRows(updatedRows);
      setCurrentColumn(currentColumn + 1);
    }
  };

  const isActive = (row, column) => {
    return row === currentRow && column === currentColumn;
  };

  const getColumnBackgroundColor = (row, column) => {
    const letter = rows[row][column];
    if (row >= currentRow) {
      return "black";
    }
    if (letter === letters[column]) {
      return "green";
    }
    if (letters.includes(letter)) {
      return "darkorange";
    }
    return "grey";
  };

  const refresh = () => {
    setRows(new Array(word.length).fill(new Array(letters.length).fill("")));
    setCurrentColumn(0);
    setCurrentRow(0);
    setWord(
      fiveLetterWords[Math.floor(Math.random() * fiveLetterWords.length)]
    );
  };

  useEffect(() => {
    if (currentRow > 0) {
      if (checkIfWon()) {
        alert("You guessed correctly");
        refresh();
      } else if (checkIfLost()) {
        alert(`You lost... Word was : ${word}`);
        refresh();
      }
    }
  }, [currentRow]);

  const checkIfWon = () => {
    const row = rows[currentRow - 1];
    return row.every((letter, i) => letter === letters[i]);
  };

  const checkIfLost = () => {
    return currentRow === rows.length;
  };

  function Rows() {
    return letters.map((array, i) => {
      return (
        <div key={i} className="row">
          {updatedRows.map((letters, j) => {
            return (
              <div
                key={j}
                className="column"
                style={{
                  border: isActive(i, j)
                    ? "1px solid green"
                    : "1px solid white",
                  backgroundColor: getColumnBackgroundColor(i, j),
                }}
              >
                <h2 key={i + j} className="letter">
                  {updatedRows[i][j]}
                </h2>
              </div>
            );
          })}
        </div>
      );
    });
  }

  return (
    <div className="game-content">
      <div className="title">
        <h1>Vordlis</h1>
      </div>
      <div className="container">
        <Rows />
      </div>
      <KeyboardPress keyPressed={keyPressed} />
    </div>
  );
}

export default Game;
